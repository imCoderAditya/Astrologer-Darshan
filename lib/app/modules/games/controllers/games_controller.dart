// import 'package:get/get.dart';
// import 'package:flutter/material.dart';



// games_controller.dart

import 'package:get/get.dart';
import 'package:flutter/material.dart';

class GamesController extends GetxController with GetTickerProviderStateMixin {
  // Observable variables
  var selectedRashi = ''.obs;
  var selectedNakshatra = ''.obs;
  var currentRashifal = ''.obs;
  var palmReadingResult = ''.obs;
  var kundaliReading = ''.obs;
  var isReading = false.obs;
  var guruLevel = 1.obs;
  var tapasya = 0.obs; // spiritual practice points
  var dhanCoins = 500.obs; // Indian currency theme
  var unlockedRashis = <String>[].obs;
  var unlockedNakshatras = <String>[].obs;
  
  // Animation controllers
  late AnimationController omSymbolController;
  late AnimationController divaLampController;
  late AnimationController kundaliWheelController;
  late Animation<double> omRotation;
  late Animation<double> lampFlicker;
  late Animation<double> kundaliSpin;
  
  // Indian Rashis (Zodiac Signs)
  final List<Map<String, dynamic>> indianRashis = [
    {'name': 'рдореЗрд╖ (Mesh)', 'english': 'Aries', 'symbol': 'тЩИ', 'element': 'рдЕрдЧреНрдирд┐', 'color': Colors.red, 'deity': 'рдордВрдЧрд▓'},
    {'name': 'рд╡реГрд╖ (Vrishabh)', 'english': 'Taurus', 'symbol': 'тЩЙ', 'element': 'рдкреГрдереНрд╡реА', 'color': Colors.green, 'deity': 'рд╢реБрдХреНрд░'},
    {'name': 'рдорд┐рдереБрди (Mithun)', 'english': 'Gemini', 'symbol': 'тЩК', 'element': 'рд╡рд╛рдпреБ', 'color': Colors.yellow, 'deity': 'рдмреБрдз'},
    {'name': 'рдХрд░реНрдХ (Kark)', 'english': 'Cancer', 'symbol': 'тЩЛ', 'element': 'рдЬрд▓', 'color': Colors.blue, 'deity': 'рдЪрдВрджреНрд░'},
    {'name': 'рд╕рд┐рдВрд╣ (Singh)', 'english': 'Leo', 'symbol': 'тЩМ', 'element': 'рдЕрдЧреНрдирд┐', 'color': Colors.orange, 'deity': 'рд╕реВрд░реНрдп'},
    {'name': 'рдХрдиреНрдпрд╛ (Kanya)', 'english': 'Virgo', 'symbol': 'тЩН', 'element': 'рдкреГрдереНрд╡реА', 'color': Colors.brown, 'deity': 'рдмреБрдз'},
    {'name': 'рддреБрд▓рд╛ (Tula)', 'english': 'Libra', 'symbol': 'тЩО', 'element': 'рд╡рд╛рдпреБ', 'color': Colors.pink, 'deity': 'рд╢реБрдХреНрд░'},
    {'name': 'рд╡реГрд╢реНрдЪрд┐рдХ (Vrishchik)', 'english': 'Scorpio', 'symbol': 'тЩП', 'element': 'рдЬрд▓', 'color': Colors.deepPurple, 'deity': 'рдордВрдЧрд▓'},
    {'name': 'рдзрдиреБ (Dhanu)', 'english': 'Sagittarius', 'symbol': 'тЩР', 'element': 'рдЕрдЧреНрдирд┐', 'color': Colors.indigo, 'deity': 'рдмреГрд╣рд╕реНрдкрддрд┐'},
    {'name': 'рдордХрд░ (Makar)', 'english': 'Capricorn', 'symbol': 'тЩС', 'element': 'рдкреГрдереНрд╡реА', 'color': Colors.grey, 'deity': 'рд╢рдирд┐'},
    {'name': 'рдХреБрдВрдн (Kumbh)', 'english': 'Aquarius', 'symbol': 'тЩТ', 'element': 'рд╡рд╛рдпреБ', 'color': Colors.cyan, 'deity': 'рд╢рдирд┐'},
    {'name': 'рдореАрди (Meen)', 'english': 'Pisces', 'symbol': 'тЩУ', 'element': 'рдЬрд▓', 'color': Colors.teal, 'deity': 'рдмреГрд╣рд╕реНрдкрддрд┐'},
  ];
  
  // Nakshatras (Lunar Mansions)
  final List<Map<String, dynamic>> nakshatras = [
    {'name': 'рдЕрд╢реНрд╡рд┐рдиреА', 'deity': 'рдЕрд╢реНрд╡рд┐рдиреА рдХреБрдорд╛рд░', 'symbol': 'ЁЯРО'},
    {'name': 'рднрд░рдгреА', 'deity': 'рдпрдо', 'symbol': 'ЁЯМЯ'},
    {'name': 'рдХреГрддреНрддрд┐рдХрд╛', 'deity': 'рдЕрдЧреНрдирд┐', 'symbol': 'ЁЯФе'},
    {'name': 'рд░реЛрд╣рд┐рдгреА', 'deity': 'рдмреНрд░рд╣реНрдорд╛', 'symbol': 'ЁЯМ╣'},
    {'name': 'рдореГрдЧрд╢рд┐рд░рд╛', 'deity': 'рдЪрдВрджреНрд░', 'symbol': 'ЁЯжМ'},
    {'name': 'рдЖрд░реНрджреНрд░рд╛', 'deity': 'рд░реБрджреНрд░', 'symbol': 'ЁЯТО'},
  ];
  
  // Vedic Predictions
  final List<String> vedicPredictions = [
    "рдЧреНрд░рд╣ рдЖрдкрдХреЗ рдкрдХреНрд╖ рдореЗрдВ рд╣реИрдВред рдЖрдЬ рдзрди рд▓рд╛рдн рдХреЗ рдпреЛрдЧ рд╣реИрдВред",
    "рдЧреБрд░реБ рдЧреНрд░рд╣ рдХрд╛ рдЖрд╢реАрд░реНрд╡рд╛рдж рдЖрдк рдкрд░ рд╣реИред рдЬреНрдЮрд╛рди рдХреА рдкреНрд░рд╛рдкреНрддрд┐ рд╣реЛрдЧреАред",
    "рдЪрдВрджреНрд░рдорд╛ рдХреА рдХреГрдкрд╛ рд╕реЗ рдорди рдореЗрдВ рд╢рд╛рдВрддрд┐ рдФрд░ рдкреНрд░реЗрдо рдорд┐рд▓реЗрдЧрд╛ред",
    "рд╕реВрд░реНрдп рджреЗрд╡ рдХрд╛ рддреЗрдЬ рдЖрдкрдХреЗ рдЬреАрд╡рди рдореЗрдВ рдЙрдЬрд╛рд▓рд╛ рд▓рд╛рдПрдЧрд╛ред",
    "рд╢рдирд┐ рдорд╣рд╛рд░рд╛рдЬ рдХреА рджрдпрд╛ рд╕реЗ рдХрдбрд╝реА рдореЗрд╣рдирдд рдХрд╛ рдлрд▓ рдорд┐рд▓реЗрдЧрд╛ред",
    "рд╢реБрдХреНрд░ рдЧреНрд░рд╣ рдХреЗ рдкреНрд░рднрд╛рд╡ рд╕реЗ рдХрд▓рд╛рдУрдВ рдореЗрдВ рд╕рдлрд▓рддрд╛ рдорд┐рд▓реЗрдЧреАред",
    "рдордВрдЧрд▓ рдХрд╛ рдмрд▓ рдЖрдкрдореЗрдВ рд╕рд╛рд╣рд╕ рдФрд░ рд╢рдХреНрддрд┐ рднрд░реЗрдЧрд╛ред",
    "рдмреБрдз рдЧреНрд░рд╣ рдХреА рдХреГрдкрд╛ рд╕реЗ рд╡реНрдпрд╛рдкрд╛рд░ рдореЗрдВ рд▓рд╛рдн рд╣реЛрдЧрд╛ред",
    "рд░рд╛рд╣реБ-рдХреЗрддреБ рдХреЗ рдкреНрд░рднрд╛рд╡ рд╕реЗ рдЕрдЪрд╛рдирдХ рдкрд░рд┐рд╡рд░реНрддрди рдЖрдПрдЧрд╛ред"
  ];
  
  // Palm Reading Results
  final List<String> palmReadings = [
    "рдЖрдкрдХреА рд╣реГрджрдп рд░реЗрдЦрд╛ рдкреНрд░реЗрдо рдФрд░ рдЦреБрд╢реА рдХрд╛ рд╕рдВрдХреЗрдд рджреЗрддреА рд╣реИред",
    "рдЬреАрд╡рди рд░реЗрдЦрд╛ рд▓рдВрдмреА рдЖрдпреБ рдФрд░ рдЕрдЪреНрдЫреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЛ рджрд░реНрд╢рд╛рддреА рд╣реИред",
    "рднрд╛рдЧреНрдп рд░реЗрдЦрд╛ рд╕рдлрд▓рддрд╛ рдФрд░ рд╕рдореГрджреНрдзрд┐ рдХрд╛ рд╕рдВрдХреЗрдд рд╣реИред",
    "рдмреБрдз рдкрд░реНрд╡рдд рд╡рд┐рдХрд╕рд┐рдд рд╣реИ - рд╡реНрдпрд╛рдкрд╛рд░ рдореЗрдВ рд╕рдлрд▓рддрд╛ рдорд┐рд▓реЗрдЧреАред",
    "рд╕реВрд░реНрдп рдкрд░реНрд╡рдд рдкреНрд░рдмрд▓ рд╣реИ - рдпрд╢ рдФрд░ рдХреАрд░реНрддрд┐ рдорд┐рд▓реЗрдЧреАред",
    "рдЪрдВрджреНрд░ рдкрд░реНрд╡рдд рд╕реЗ рдХрд▓рд╛рддреНрдордХ рдкреНрд░рддрд┐рднрд╛ рдХрд╛ рдкрддрд╛ рдЪрд▓рддрд╛ рд╣реИред",
  ];
  
  // Kundali Messages
  final List<String> kundaliMessages = [
    "рдЖрдкрдХреА рдХреБрдВрдбрд▓реА рдореЗрдВ рд░рд╛рдЬрдпреЛрдЧ рдХреЗ рд╕рдВрдпреЛрдЧ рд╣реИрдВред",
    "рд▓рдЧреНрди рдмрд▓реА рд╣реИ - рд╡реНрдпрдХреНрддрд┐рддреНрд╡ рдореЗрдВ рдЖрдХрд░реНрд╖рдг рд╣реИред",
    "рдзрди рднрд╛рд╡ рдореЗрдВ рд╢реБрдн рдЧреНрд░рд╣ - рд╕рдВрдкрддреНрддрд┐ рдХреА рдкреНрд░рд╛рдкреНрддрд┐ред",
    "рдХрд░реНрдо рднрд╛рд╡ рдордЬрдмреВрдд - рдХрд╛рд░реНрдпрдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдЙрдиреНрдирддрд┐ред",
    "рдкрдВрдЪрдо рднрд╛рд╡ рдореЗрдВ рд╢реБрднрддрд╛ - рд╕рдВрддрд╛рди рд╕реБрдЦ рдкреНрд░рд╛рдкреНрдд рд╣реЛрдЧрд╛ред",
    "рд╕рдкреНрддрдо рднрд╛рд╡ рд╢реБрдн - рд╡рд┐рд╡рд╛рд╣ рдореЗрдВ рдЦреБрд╢реА рдорд┐рд▓реЗрдЧреАред",
  ];

  @override
  void onInit() {
    super.onInit();
    initializeAnimations();
    initializeUnlockedItems();
  }
  
  void initializeAnimations() {
    omSymbolController = AnimationController(
      duration: const Duration(seconds: 3),
      vsync: this,
    )..repeat();
    
    divaLampController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    )..repeat(reverse: true);
    
    kundaliWheelController = AnimationController(
      duration: const Duration(seconds: 5),
      vsync: this,
    );
    
    omRotation = Tween<double>(
      begin: 0,
      end: 2 * 3.14159,
    ).animate(CurvedAnimation(
      parent: omSymbolController,
      curve: Curves.linear,
    ));
    
    lampFlicker = Tween<double>(
      begin: 0.7,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: divaLampController,
      curve: Curves.easeInOut,
    ));
    
    kundaliSpin = Tween<double>(
      begin: 0,
      end: 2 * 3.14159,
    ).animate(CurvedAnimation(
      parent: kundaliWheelController,
      curve: Curves.easeOut,
    ));
  }
  
  void initializeUnlockedItems() {
    unlockedRashis.value = ['рдореЗрд╖ (Mesh)', 'рд╡реГрд╖ (Vrishabh)', 'рдорд┐рдереБрди (Mithun)'];
    unlockedNakshatras.value = ['рдЕрд╢реНрд╡рд┐рдиреА', 'рднрд░рдгреА'];
  }
  
  void selectRashi(String rashiName) {
    if (!isRashiUnlocked(rashiName)) {
      Get.snackbar(
        'рдмрдВрдж рд╣реИ! ЁЯФТ',
        'рдЧреБрд░реБ рд╕реНрддрд░ ${getRequiredGuruLevel(rashiName)} рдкрд░ рдкрд╣реБрдВрдЪреЗрдВ',
        backgroundColor: const Color(0xFFFF6B35).withOpacity(0.8),
        colorText: Colors.white,
        icon: const Icon(Icons.lock, color: Colors.white),
      );
      return;
    }
    
    selectedRashi.value = rashiName;
    generateRashifal();
    gainTapasya(15);
  }
  
  void generateRashifal() {
    if (selectedRashi.value.isEmpty) return;
    
    isReading.value = true;
    currentRashifal.value = '';
    
    Future.delayed(const Duration(seconds: 2), () {
      final random = DateTime.now().millisecondsSinceEpoch % vedicPredictions.length;
      currentRashifal.value = vedicPredictions[random];
      isReading.value = false;
      gainDhanCoins(10);
    });
  }
  
  void doPalmReading() {
    if (dhanCoins.value < 50) {
      Get.snackbar(
        'рдзрди рдХреА рдХрдореА ЁЯТ░',
        'рд╣рд╕реНрдд рд░реЗрдЦрд╛ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП 50 рд╕рд┐рдХреНрдХреЗ рдЪрд╛рд╣рд┐рдП',
        backgroundColor: Colors.red.withOpacity(0.8),
        colorText: Colors.white,
        icon: const Icon(Icons.error, color: Colors.white),
      );
      return;
    }
    
    dhanCoins.value -= 50;
    isReading.value = true;
    
    Future.delayed(const Duration(seconds: 3), () {
      final random = DateTime.now().millisecondsSinceEpoch % palmReadings.length;
      palmReadingResult.value = palmReadings[random];
      isReading.value = false;
      gainTapasya(30);
    });
  }
  
  void readKundali() {
    if (dhanCoins.value < 100) {
      Get.snackbar(
        'рдЕрдкрд░реНрдпрд╛рдкреНрдд рдзрди ЁЯкЩ',
        'рдХреБрдВрдбрд▓реА рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП 100 рд╕рд┐рдХреНрдХреЗ рдЪрд╛рд╣рд┐рдП',
        backgroundColor: Colors.red.withOpacity(0.8),
        colorText: Colors.white,
        icon: const Icon(Icons.error, color: Colors.white),
      );
      return;
    }
    
    dhanCoins.value -= 100;
    isReading.value = true;
    kundaliWheelController.forward();
    
    Future.delayed(const Duration(seconds: 4), () {
      final random = DateTime.now().millisecondsSinceEpoch % kundaliMessages.length;
      kundaliReading.value = kundaliMessages[random];
      isReading.value = false;
      kundaliWheelController.reverse();
      gainTapasya(50);
    });
  }
  
  void gainTapasya(int points) {
    tapasya.value += points;
    
    // Guru level up logic
    int newLevel = (tapasya.value / 200).floor() + 1;
    if (newLevel > guruLevel.value) {
      guruLevel.value = newLevel;
      unlockNewItems();
      Get.snackbar(
        'рдЧреБрд░реБ рд╕реНрддрд░ рдмрдврд╝рд╛! ЁЯЩП',
        'рдЖрдк рдЧреБрд░реБ рд╕реНрддрд░ $newLevel рдкрд░ рдкрд╣реБрдВрдЪ рдЧрдП!',
        backgroundColor: const Color(0xFFFF9500).withOpacity(0.9),
        colorText: Colors.white,
        icon: const Text('ЁЯХЙя╕П', style: TextStyle(fontSize: 20)),
        duration: const Duration(seconds: 3),
      );
    }
  }
  
  void gainDhanCoins(int amount) {
    dhanCoins.value += amount;
  }
  
  void unlockNewItems() {
    // Unlock new rashis
    for (var rashi in indianRashis) {
      if (!unlockedRashis.contains(rashi['name']) && 
          guruLevel.value >= getRequiredGuruLevel(rashi['name'])) {
        unlockedRashis.add(rashi['name']);
        Get.snackbar(
          'рдирдИ рд░рд╛рд╢рд┐ рдЦреБрд▓реА! тЬи',
          '${rashi['name']} рдЕрдм рдЙрдкрд▓рдмреНрдз рд╣реИ!',
          backgroundColor: rashi['color'].withOpacity(0.8),
          colorText: Colors.white,
          icon: Text(rashi['symbol'], style: const TextStyle(fontSize: 20)),
          duration: const Duration(seconds: 3),
        );
      }
    }
    
    // Unlock new nakshatras
    for (var nakshatra in nakshatras) {
      if (!unlockedNakshatras.contains(nakshatra['name']) && 
          guruLevel.value >= 3) {
        unlockedNakshatras.add(nakshatra['name']);
      }
    }
  }
  
  bool isRashiUnlocked(String rashiName) {
    return unlockedRashis.contains(rashiName);
  }
  
  int getRequiredGuruLevel(String rashiName) {
    int index = indianRashis.indexWhere((r) => r['name'] == rashiName);
    return (index ~/ 3) + 1;
  }
  
  @override
  void onClose() {
    omSymbolController.dispose();
    divaLampController.dispose();
    kundaliWheelController.dispose();
    super.onClose();
  }
}

// class GamesController extends GetxController with GetTickerProviderStateMixin {
//   // Observable variables
//   var selectedZodiac = ''.obs;
//   var currentHoroscope = ''.obs;
//   var crystalBallMessage = ''.obs;
//   var isReading = false.obs;
//   var playerLevel = 1.obs;
//   var experience = 0.obs;
//   var coins = 100.obs;
//   var unlockedZodiacs = <String>[].obs;
  
//   // Animation controllers
//   late AnimationController starAnimationController;
//   late AnimationController crystalBallController;
//   late Animation<double> starRotation;
//   late Animation<double> crystalBallGlow;
  
//   // Zodiac data
//   final List<Map<String, dynamic>> zodiacSigns = [
//     {'name': 'Aries', 'icon': 'тЩИ', 'element': 'Fire', 'color': Colors.red, 'unlocked': true},
//     {'name': 'Taurus', 'icon': 'тЩЙ', 'element': 'Earth', 'color': Colors.green, 'unlocked': true},
//     {'name': 'Gemini', 'icon': 'тЩК', 'element': 'Air', 'color': Colors.yellow, 'unlocked': true},
//     {'name': 'Cancer', 'icon': 'тЩЛ', 'element': 'Water', 'color': Colors.blue, 'unlocked': false},
//     {'name': 'Leo', 'icon': 'тЩМ', 'element': 'Fire', 'color': Colors.orange, 'unlocked': false},
//     {'name': 'Virgo', 'icon': 'тЩН', 'element': 'Earth', 'color': Colors.brown, 'unlocked': false},
//     {'name': 'Libra', 'icon': 'тЩО', 'element': 'Air', 'color': Colors.pink, 'unlocked': false},
//     {'name': 'Scorpio', 'icon': 'тЩП', 'element': 'Water', 'color': Colors.deepPurple, 'unlocked': false},
//     {'name': 'Sagittarius', 'icon': 'тЩР', 'element': 'Fire', 'color': Colors.indigo, 'unlocked': false},
//     {'name': 'Capricorn', 'icon': 'тЩС', 'element': 'Earth', 'color': Colors.grey, 'unlocked': false},
//     {'name': 'Aquarius', 'icon': 'тЩТ', 'element': 'Air', 'color': Colors.cyan, 'unlocked': false},
//     {'name': 'Pisces', 'icon': 'тЩУ', 'element': 'Water', 'color': Colors.teal, 'unlocked': false},
//   ];
  
//   // Horoscope predictions
//   final List<String> horoscopePredictions = [
//     "The stars align in your favor today. Great fortune awaits!",
//     "A mysterious encounter will change your perspective.",
//     "Your intuition will guide you to hidden treasures.",
//     "The cosmos whispers secrets of ancient wisdom to you.",
//     "A celestial blessing will illuminate your path forward.",
//     "The universe conspires to bring you unexpected joy.",
//     "Your spiritual energy is particularly strong today.",
//     "The moon's phases reveal hidden opportunities.",
//     "A karmic cycle is completing, bringing new beginnings.",
//     "The celestial bodies dance to bring you prosperity."
//   ];
  
//   // Crystal ball messages
//   final List<String> crystalMessages = [
//     "I see... a journey of self-discovery ahead...",
//     "The mists reveal... great love approaching...",
//     "Through the crystal depths... I see success...",
//     "The ethereal visions show... hidden talents awakening...",
//     "In the swirling energies... adventure calls...",
//     "The crystal speaks of... wisdom gained through experience...",
//     "I perceive... a guardian spirit watching over you...",
//     "The mystical energies reveal... a time of transformation..."
//   ];

//   @override
//   void onInit() {
//     super.onInit();
//     initializeAnimations();
//     initializeUnlockedZodiacs();
//   }
  
//   void initializeAnimations() {
//     starAnimationController = AnimationController(
//       duration: const Duration(seconds: 4),
//       vsync: this,
//     )..repeat();
    
//     crystalBallController = AnimationController(
//       duration: const Duration(seconds: 2),
//       vsync: this,
//     );
    
//     starRotation = Tween<double>(
//       begin: 0,
//       end: 2 * 3.14159,
//     ).animate(CurvedAnimation(
//       parent: starAnimationController,
//       curve: Curves.linear,
//     ));
    
//     crystalBallGlow = Tween<double>(
//       begin: 0.3,
//       end: 1.0,
//     ).animate(CurvedAnimation(
//       parent: crystalBallController,
//       curve: Curves.easeInOut,
//     ));
//   }
  
//   void initializeUnlockedZodiacs() {
//     unlockedZodiacs.value = ['Aries', 'Taurus', 'Gemini'];
//   }
  
//   void selectZodiac(String zodiacName) {
//     if (!isZodiacUnlocked(zodiacName)) {
//       Get.snackbar(
//         'Locked!',
//         'Reach level ${getRequiredLevel(zodiacName)} to unlock $zodiacName',
//         backgroundColor: Colors.deepPurple.withOpacity(0.8),
//         colorText: Colors.white,
//         icon: const Icon(Icons.lock, color: Colors.white),
//       );
//       return;
//     }
    
//     selectedZodiac.value = zodiacName;
//     generateHoroscope();
//     gainExperience(10);
//   }
  
//   void generateHoroscope() {
//     if (selectedZodiac.value.isEmpty) return;
    
//     isReading.value = true;
//     currentHoroscope.value = '';
    
//     Future.delayed(const Duration(seconds: 1), () {
//       final random = DateTime.now().millisecondsSinceEpoch % horoscopePredictions.length;
//       currentHoroscope.value = horoscopePredictions[random];
//       isReading.value = false;
//       gainCoins(5);
//     });
//   }
  
//   void useCrystalBall() {
//     if (coins.value < 20) {
//       Get.snackbar(
//         'Insufficient Coins',
//         'You need 20 coins to use the Crystal Ball',
//         backgroundColor: Colors.red.withOpacity(0.8),
//         colorText: Colors.white,
//         icon: const Icon(Icons.error, color: Colors.white),
//       );
//       return;
//     }
    
//     coins.value -= 20;
//     isReading.value = true;
//     crystalBallController.forward();
    
//     Future.delayed(const Duration(seconds: 2), () {
//       final random = DateTime.now().millisecondsSinceEpoch % crystalMessages.length;
//       crystalBallMessage.value = crystalMessages[random];
//       isReading.value = false;
//       crystalBallController.reverse();
//       gainExperience(25);
//     });
//   }
  
//   void gainExperience(int exp) {
//     experience.value += exp;
    
//     // Level up logic
//     int newLevel = (experience.value / 100).floor() + 1;
//     if (newLevel > playerLevel.value) {
//       playerLevel.value = newLevel;
//       unlockNewZodiac();
//       Get.snackbar(
//         'Level Up! ЁЯМЯ',
//         'You reached level $newLevel!',
//         backgroundColor: Colors.amber.withOpacity(0.9),
//         colorText: Colors.white,
//         icon: const Icon(Icons.star, color: Colors.white),
//         duration: const Duration(seconds: 3),
//       );
//     }
//   }
  
//   void gainCoins(int amount) {
//     coins.value += amount;
//   }
  
//   void unlockNewZodiac() {
//     for (var zodiac in zodiacSigns) {
//       if (!unlockedZodiacs.contains(zodiac['name']) && 
//           playerLevel.value >= getRequiredLevel(zodiac['name'])) {
//         unlockedZodiacs.add(zodiac['name']);
//         Get.snackbar(
//           'New Zodiac Unlocked! тЬи',
//           '${zodiac['name']} is now available!',
//           backgroundColor: zodiac['color'].withOpacity(0.8),
//           colorText: Colors.white,
//           icon: Text(zodiac['icon'], style: const TextStyle(fontSize: 20)),
//           duration: const Duration(seconds: 3),
//         );
//       }
//     }
//   }
  
//   bool isZodiacUnlocked(String zodiacName) {
//     return unlockedZodiacs.contains(zodiacName);
//   }
  
//   int getRequiredLevel(String zodiacName) {
//     int index = zodiacSigns.indexWhere((z) => z['name'] == zodiacName);
//     return (index ~/ 3) + 1; // Every 3 zodiacs require next level
//   }
  
//   @override
//   void onClose() {
//     starAnimationController.dispose();
//     crystalBallController.dispose();
//     super.onClose();
//   }
// }
